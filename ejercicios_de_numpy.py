# -*- coding: utf-8 -*-
"""EjerciciosNumpy_177603.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ztUlkcI5NvrKn0ui49e1XvwO6X3C8k-8
"""

# -*- coding: utf-8 -*-
"""Ejercicios de numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0A5L8EVWINhE-0G5AkgUdqdLWstQV1r

# Instrucciones

## Sigue las instrucciones para cada celda y al final baja la libreta en formato .py y subelo al repositorio que se te indique, no modifiques el nombre la de función, solo importa una vez numpy en el código.
"""

import numpy as np

"""### NumPy Arrays

1. Create a NumPy array of 10 random integers between 0 and 100.
"""

def rand_int():
  '''Crea un arreglo de numpy con 10 enteros aleatorios entre 0 y 100.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 10 enteros aleatorios entre 0 y 100.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_int()
  array([ 9, 15, 64, 28, 89, 93, 29,  8, 73,  0])
  '''
  return np.random.randint(0, 100, 10)

"""2. Create a NumPy array of 5 random floating-point numbers between 0 and 1."""

def rand_float():
  '''Regresa un arreglo de numpy con 5 números punto flotante entre 0 y 1.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 5 números punto flotante entre 0 y 1.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_float()
  array([0.77132064, 0.02075195, 0.63364823, 0.74880388, 0.49850701])
  '''
  return np.random.random(5)

"""3. Create a NumPy array of the first 10 prime numbers."""

def first_10_primes():
  '''Crea un arreglo de numpy con los diez primeros números primos,
  generados mediante ciclos y condicionales que prueban si un número es primo.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con los diez primeros números primos.

  Examples
  --------
  >>> first_10_primes()
  array([ 2,  3,  5,  7, 11, 13, 17, 19, 23, 29])
  '''
  primos = []
  n = 2
  while len(primos) < 10:
      for i in range(int(np.sqrt(n)) + 1):
          if n % i == 0:
              break
          else:
              primos.append(n)
          n += 1
  return np.array(primos)
first_10_primes()

"""4. Create a NumPy array of the squares of the numbers from 1 to 10."""

def squares():
  '''Regresa un arreglo de numpy con los cuadrados de los números del 1 al 10.
  '''
  cuadrados = []
  n = 2
  while len(cuadrados) < 10:
      for i in range(1, 11):
          i = i**2
          cuadrados.append(i)
  return np.array(cuadrados)
squares()

"""5. Create a NumPy array of the cubes of the numbers from 1 to 10."""

def cubes():
    cubos = []
    n = 2
    while len(cubos) < 10:
        for i in range(1, 11):
            i = i**3
            cubos.append(i)
    return np.array(cubos)
cubes()

"""### NumPy Array Operations

1. Add two NumPy arrays together.
"""

def add_arrays(arr1, arr2):
  '''Regresa la suma de dos arreglos de numpy.

  Returns
  -------
  numpy.ndarray
    Suma de dos arreglos NumPy con el mismo tamaño.

  Parameters
  ----------
  arr1: numpy.ndarray
  arr2: numpy.ndarray

  Precondition
  ------------
    - arr1.shape == arr2.shape

  Examples
  --------
  >>> add_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))
  array([5, 7, 9])

  >>> arr1 = np.array([1, 2, 3])
  >>> arr2 = np.array([4, 5, 6])
  >>> add_arrays(arr1, arr2)
  array([5, 7, 9])
  '''
  assert arr1.shape == arr2.shape, 'Los arreglos deben tener el mismo tamaño'
  return np.add(arr1, arr2)

add_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))

"""2. Subtract two NumPy arrays from each other, second argument less first."""

def subtract_arrays(arr1, arr2):
  '''Calcula arr2 menos arr1 (arreglos de numpy).
  '''
  return np.subtract(arr1, arr2)

subtract_arrays(np.array([4, 5, 6]), np. array([1, 2, 3]))

"""3. Multiply two NumPy arrays together (element-wise)."""

def multiply_arrays(arr1, arr2):
  '''Multiplica dos arreglos de numpy elemento por elemento.
  '''
  return np.multiply(arr1, arr2)

multiply_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))

"""4. Divide two NumPy arrays by each other (element-wise)."""

def divide_arrays(arr1, arr2):
  '''Divide arr2 antre arr1 (arreglos de numpy).

  Precondition
  ------------
    - arr2.any(0)
  '''
  assert arr1.any(0), 'No se puede dividir por cero'
  return np.divide(arr1, arr2)

divide_arrays(np.array([4, 5, 6]), ([1, 2, 3]))

"""5. Create a NumPy array of the integer numbers from 1 to 5. Calculate the mean, median, and standard deviation."""

def stats(arr):
  '''Calcula la media, la mediana y la desviación estándar de un arreglo de numpy
  en un tuple con las siguientes posiciones: (media, mediana, desviacion_std).

  Returns
  -------
  tuple
    Tuple con las siguientes posiciones: (media, mediana, desviacion_std).

  Parameters
  ----------
  arr: numpy.ndarray
    arreglo de numpy de los números de 1 a 5.

  Precondition
  ------------
    - arr.size == 5
  '''
  assert arr.size == 5, 'El arreglo debe tener 5 elementos'
  media = np.mean(arr)
  mediana = np.median(arr)
  desviacion = np.std(arr)

  return (media, mediana, desviacion)

stats(np.array([1, 2, 3, 4, 5]))
